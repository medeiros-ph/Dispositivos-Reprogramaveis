
teste001.elf:     file format elf32-littlenios2
teste001.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000068c memsz 0x0000068c flags r-x
    LOAD off    0x000016ac vaddr 0x000106ac paddr 0x000106b0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000016b4 vaddr 0x000106b4 paddr 0x000106b4 align 2**12
         filesz 0x00000000 memsz 0x00000020 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000068c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rwdata       00000004  000106ac  000106b0  000016ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  3 .bss          00000020  000106b4  000106b4  000016b4  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000016d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000026b  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c55  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000063e  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a3f  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  000047a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005fb  00000000  00000000  00004a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000383  00000000  00000000  0000500b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  00005390  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  000053d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  000062b5  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  000062c4  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000062c5  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  000062c6  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  000062d1  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  000062dc  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000012  00000000  00000000  000062e7  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000033  00000000  00000000  000062f9  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0005643b  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
000106ac l    d  .rwdata	00000000 .rwdata
000106b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
000106bc l     O .bss	00000004 estado.1623
000106b8 l     O .bss	00000002 cont_timer0.1689
000106b6 l     O .bss	00000002 cont_timer1.1690
000106b4 l     O .bss	00000002 cont_timer2.1691
00000000 l    df *ABS*	00000000 alt_load.c
000103ac l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010528 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00010438 g     F .text	0000002c alt_main
000106b0 g       *ABS*	00000000 __flash_rwdata_start
00010060 g     F .text	00000004 f_timer2
000106c0 g     O .bss	00000002 max_timer0
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000106cc g     O .bss	00000004 alt_argv
000186ac g       *ABS*	00000000 _gp
00010464 g     F .text	00000004 usleep
00010380 g     F .text	0000001c loop
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010664 g     F .text	00000008 __udivsi3
000102e8 g     F .text	00000098 f_interrupt
000100a4 g     F .text	00000244 f_timer0
000106d4 g       *ABS*	00000000 __bss_end
00010518 g     F .text	00000004 alt_dcache_flush_all
000106c2 g     O .bss	00000002 max_timer2
000106c4 g     O .bss	00000002 max_timer1
000106b0 g       *ABS*	00000000 __ram_rwdata_end
000106ac g       *ABS*	00000000 __ram_rodata_end
000106ac g     O .rwdata	00000004 jtag_uart_0
0001066c g     F .text	00000008 __umodsi3
000106d4 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000003c _start
00010468 g     F .text	00000004 alt_sys_init
00010674 g     F .text	00000038 __mulsi3
000106ac g       *ABS*	00000000 __ram_rwdata_start
000106ac g       *ABS*	00000000 __ram_rodata_start
0001048c g     F .text	0000008c alt_busy_sleep
000106d4 g       *ABS*	00000000 __alt_stack_base
0001005c g     F .text	00000004 f_timer1
000106b4 g       *ABS*	00000000 __bss_start
0001039c g     F .text	00000010 main
000106d0 g     O .bss	00000004 alt_envp
000105a4 g     F .text	00000060 __divsi3
000106ac g       *ABS*	00000000 __flash_rodata_start
0001046c g     F .text	00000020 alt_irq_init
000106c8 g     O .bss	00000004 alt_argc
00010064 g     F .text	00000040 setup
00010020 g       *ABS*	00000000 __ram_exceptions_start
000106b0 g       *ABS*	00000000 _edata
000106d4 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010520 g     F .text	00000008 altera_nios2_qsys_irq_init
0001000c g       .entry	00000000 exit
00010604 g     F .text	00000060 __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
0001051c g     F .text	00000004 alt_icache_flush_all
000103cc g     F .text	0000006c alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a1ab14 	ori	gp,gp,34476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1081ad14 	ori	r2,r2,1716

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c1b514 	ori	r3,r3,1748

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00103cc0 	call	103cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00104380 	call	10438 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <f_timer1>:

}

void f_timer1 (void) {

}
   1005c:	f800283a 	ret

00010060 <f_timer2>:

void f_timer2 (void) {

}
   10060:	f800283a 	ret

00010064 <setup>:
void setup (int dado, int local);

void setup (int dado, int local) {


	max_timer0 = 299;
   10064:	00804ac4 	movi	r2,299
	LAT(GRAVA_BASE, 0);
   10068:	00c000b4 	movhi	r3,2
   1006c:	18c42004 	addi	r3,r3,4224
void setup (int dado, int local);

void setup (int dado, int local) {


	max_timer0 = 299;
   10070:	d0a0050d 	sth	r2,-32748(gp)
	LAT(GRAVA_BASE, 0);
   10074:	18000035 	stwio	zero,0(r3)
	LAT(DADO_BASE, dado);
   10078:	008000b4 	movhi	r2,2
   1007c:	10842c04 	addi	r2,r2,4272
   10080:	11000035 	stwio	r4,0(r2)
	LAT(TIPO_BASE, 1);
   10084:	01000044 	movi	r4,1
   10088:	10bffc04 	addi	r2,r2,-16
   1008c:	11000035 	stwio	r4,0(r2)
	LAT(LOCAL_BASE, local); //unidade
   10090:	10bffc04 	addi	r2,r2,-16
   10094:	11400035 	stwio	r5,0(r2)

	LAT(GRAVA_BASE, 1);
   10098:	19000035 	stwio	r4,0(r3)
	//nop();
	LAT(GRAVA_BASE, 0);
   1009c:	18000035 	stwio	zero,0(r3)



}
   100a0:	f800283a 	ret

000100a4 <f_timer0>:

void f_timer0 (void) {
   100a4:	defffe04 	addi	sp,sp,-8
   100a8:	dfc00115 	stw	ra,4(sp)
   100ac:	dc000015 	stw	r16,0(sp)

	static int estado = 0;

	int sequencia = 0;
	sequencia = PORT(SW_BASE)&1;
   100b0:	008000b4 	movhi	r2,2
   100b4:	10843804 	addi	r2,r2,4320
   100b8:	10800037 	ldwio	r2,0(r2)
   100bc:	d0e00417 	ldw	r3,-32752(gp)

	if(sequencia == 0)
   100c0:	1080004c 	andi	r2,r2,1
   100c4:	1000401e 	bne	r2,zero,101c8 <f_timer0+0x124>
	{
		switch (estado)
   100c8:	00800504 	movi	r2,20
   100cc:	10c03c36 	bltu	r2,r3,101c0 <f_timer0+0x11c>
   100d0:	18c5883a 	add	r2,r3,r3
   100d4:	1085883a 	add	r2,r2,r2
   100d8:	00c00074 	movhi	r3,1
   100dc:	18c03b04 	addi	r3,r3,236
   100e0:	10c5883a 	add	r2,r2,r3
   100e4:	10800017 	ldw	r2,0(r2)
   100e8:	1000683a 	jmp	r2
   100ec:	000101c0 	call	101c <__alt_mem_onchip_memory2_0-0xefe4>
   100f0:	000101c0 	call	101c <__alt_mem_onchip_memory2_0-0xefe4>
   100f4:	00010240 	call	1024 <__alt_mem_onchip_memory2_0-0xefdc>
   100f8:	00010140 	call	1014 <__alt_mem_onchip_memory2_0-0xefec>
   100fc:	00010140 	call	1014 <__alt_mem_onchip_memory2_0-0xefec>
   10100:	00010148 	cmpgei	zero,zero,1029
   10104:	00010148 	cmpgei	zero,zero,1029
   10108:	00010150 	cmplti	zero,zero,1029
   1010c:	00010150 	cmplti	zero,zero,1029
   10110:	00010150 	cmplti	zero,zero,1029
   10114:	00010150 	cmplti	zero,zero,1029
   10118:	0001016c 	andhi	zero,zero,1029
   1011c:	0001016c 	andhi	zero,zero,1029
   10120:	00010188 	cmpgei	zero,zero,1030
   10124:	00010188 	cmpgei	zero,zero,1030
   10128:	00010188 	cmpgei	zero,zero,1030
   1012c:	00010188 	cmpgei	zero,zero,1030
   10130:	000101a4 	muli	zero,zero,1030
   10134:	000101a4 	muli	zero,zero,1030
   10138:	000101c0 	call	101c <__alt_mem_onchip_memory2_0-0xefe4>
   1013c:	000101c0 	call	101c <__alt_mem_onchip_memory2_0-0xefe4>
					estado = 5;
					setup(0, 1);
					setup(5, 0);
					break;
				case 4:
					estado = 5;
   10140:	04000144 	movi	r16,5
   10144:	00004306 	br	10254 <f_timer0+0x1b0>
					estado = 7;
					setup(0, 1);
					setup(7, 0);
					break;
				case 6:
					estado = 7;
   10148:	040001c4 	movi	r16,7
   1014c:	00004106 	br	10254 <f_timer0+0x1b0>
					setup(1, 1);
					setup(1, 0);
					break;
				case 10:
					estado = 11;
					setup(1, 1);
   10150:	01000044 	movi	r4,1
   10154:	200b883a 	mov	r5,r4
					estado = 11;
					setup(1, 1);
					setup(1, 0);
					break;
				case 10:
					estado = 11;
   10158:	008002c4 	movi	r2,11
   1015c:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   10160:	00100640 	call	10064 <setup>
					setup(1, 0);
   10164:	01000044 	movi	r4,1
   10168:	00005a06 	br	102d4 <f_timer0+0x230>
					setup(1, 1);
					setup(3, 0);
					break;
				case 12:
					estado = 13;
					setup(1, 1);
   1016c:	01000044 	movi	r4,1
   10170:	200b883a 	mov	r5,r4
					estado = 13;
					setup(1, 1);
					setup(3, 0);
					break;
				case 12:
					estado = 13;
   10174:	00800344 	movi	r2,13
   10178:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   1017c:	00100640 	call	10064 <setup>
					setup(3, 0);
   10180:	010000c4 	movi	r4,3
   10184:	00005306 	br	102d4 <f_timer0+0x230>
					setup(1, 1);
					setup(7, 0);
					break;
				case 16:
					estado = 17;
					setup(1, 1);
   10188:	01000044 	movi	r4,1
   1018c:	200b883a 	mov	r5,r4
					estado = 17;
					setup(1, 1);
					setup(7, 0);
					break;
				case 16:
					estado = 17;
   10190:	00800444 	movi	r2,17
   10194:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   10198:	00100640 	call	10064 <setup>
					setup(7, 0);
   1019c:	010001c4 	movi	r4,7
   101a0:	00004c06 	br	102d4 <f_timer0+0x230>
					setup(1, 1);
					setup(9, 0);
					break;
				case 18:
					estado = 19;
					setup(1, 1);
   101a4:	01000044 	movi	r4,1
   101a8:	200b883a 	mov	r5,r4
					estado = 19;
					setup(1, 1);
					setup(9, 0);
					break;
				case 18:
					estado = 19;
   101ac:	008004c4 	movi	r2,19
   101b0:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   101b4:	00100640 	call	10064 <setup>
					setup(9, 0);
   101b8:	01000244 	movi	r4,9
   101bc:	00004506 	br	102d4 <f_timer0+0x230>
					estado = 2;
					setup(0, 1);
					setup(2, 0);
					break;
				default:
					estado = 2;
   101c0:	04000084 	movi	r16,2
   101c4:	00002306 	br	10254 <f_timer0+0x1b0>


	}
	else
	{
		switch (estado)
   101c8:	00800504 	movi	r2,20
   101cc:	10c03c36 	bltu	r2,r3,102c0 <f_timer0+0x21c>
   101d0:	18c5883a 	add	r2,r3,r3
   101d4:	1085883a 	add	r2,r2,r2
   101d8:	00c00074 	movhi	r3,1
   101dc:	18c07b04 	addi	r3,r3,492
   101e0:	10c5883a 	add	r2,r2,r3
   101e4:	10800017 	ldw	r2,0(r2)
   101e8:	1000683a 	jmp	r2
   101ec:	00010240 	call	1024 <__alt_mem_onchip_memory2_0-0xefdc>
   101f0:	00010240 	call	1024 <__alt_mem_onchip_memory2_0-0xefdc>
   101f4:	00010240 	call	1024 <__alt_mem_onchip_memory2_0-0xefdc>
   101f8:	00010248 	cmpgei	zero,zero,1033
   101fc:	00010248 	cmpgei	zero,zero,1033
   10200:	00010248 	cmpgei	zero,zero,1033
   10204:	00010250 	cmplti	zero,zero,1033
   10208:	00010250 	cmplti	zero,zero,1033
   1020c:	00010250 	cmplti	zero,zero,1033
   10210:	0001026c 	andhi	zero,zero,1033
   10214:	0001026c 	andhi	zero,zero,1033
   10218:	0001026c 	andhi	zero,zero,1033
   1021c:	00010288 	cmpgei	zero,zero,1034
   10220:	00010288 	cmpgei	zero,zero,1034
   10224:	00010288 	cmpgei	zero,zero,1034
   10228:	000102a4 	muli	zero,zero,1034
   1022c:	000102a4 	muli	zero,zero,1034
   10230:	000102a4 	muli	zero,zero,1034
   10234:	000102c0 	call	102c <__alt_mem_onchip_memory2_0-0xefd4>
   10238:	000102c0 	call	102c <__alt_mem_onchip_memory2_0-0xefd4>
   1023c:	000102c0 	call	102c <__alt_mem_onchip_memory2_0-0xefd4>
					estado = 3;
					setup(0, 1);
					setup(3, 0);
					break;
				case 2:
					estado = 3;
   10240:	040000c4 	movi	r16,3
   10244:	00000306 	br	10254 <f_timer0+0x1b0>
					estado = 6;
					setup(0, 1);
					setup(6, 0);
					break;
				case 5:
					estado = 6;
   10248:	04000184 	movi	r16,6
   1024c:	00000106 	br	10254 <f_timer0+0x1b0>
					estado = 9;
					setup(0, 1);
					setup(9, 0);
					break;
				case 8:
					estado = 9;
   10250:	04000244 	movi	r16,9
					setup(0, 1);
   10254:	0009883a 	mov	r4,zero
   10258:	01400044 	movi	r5,1
					estado = 9;
					setup(0, 1);
					setup(9, 0);
					break;
				case 8:
					estado = 9;
   1025c:	d4200415 	stw	r16,-32752(gp)
					setup(0, 1);
   10260:	00100640 	call	10064 <setup>
					setup(9, 0);
   10264:	8009883a 	mov	r4,r16
   10268:	00001a06 	br	102d4 <f_timer0+0x230>
					setup(1, 1);
					setup(2, 0);
					break;
				case 11:
					estado = 12;
					setup(1, 1);
   1026c:	01000044 	movi	r4,1
   10270:	200b883a 	mov	r5,r4
					estado = 12;
					setup(1, 1);
					setup(2, 0);
					break;
				case 11:
					estado = 12;
   10274:	00800304 	movi	r2,12
   10278:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   1027c:	00100640 	call	10064 <setup>
					setup(2, 0);
   10280:	01000084 	movi	r4,2
   10284:	00001306 	br	102d4 <f_timer0+0x230>
					setup(1, 1);
					setup(5, 0);
					break;
				case 14:
					estado = 15;
					setup(1, 1);
   10288:	01000044 	movi	r4,1
   1028c:	200b883a 	mov	r5,r4
					estado = 15;
					setup(1, 1);
					setup(5, 0);
					break;
				case 14:
					estado = 15;
   10290:	008003c4 	movi	r2,15
   10294:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   10298:	00100640 	call	10064 <setup>
					setup(5, 0);
   1029c:	01000144 	movi	r4,5
   102a0:	00000c06 	br	102d4 <f_timer0+0x230>
					setup(1, 1);
					setup(8, 0);
					break;
				case 17:
					estado = 18;
					setup(1, 1);
   102a4:	01000044 	movi	r4,1
   102a8:	200b883a 	mov	r5,r4
					estado = 18;
					setup(1, 1);
					setup(8, 0);
					break;
				case 17:
					estado = 18;
   102ac:	00800484 	movi	r2,18
   102b0:	d0a00415 	stw	r2,-32752(gp)
					setup(1, 1);
   102b4:	00100640 	call	10064 <setup>
					setup(8, 0);
   102b8:	01000204 	movi	r4,8
   102bc:	00000506 	br	102d4 <f_timer0+0x230>
					setup(0, 1);
					setup(0, 0);
					break;
				default:
					estado = 0;
					setup(0, 1);
   102c0:	0009883a 	mov	r4,zero
   102c4:	01400044 	movi	r5,1
					estado = 0;
					setup(0, 1);
					setup(0, 0);
					break;
				default:
					estado = 0;
   102c8:	d0200415 	stw	zero,-32752(gp)
					setup(0, 1);
   102cc:	00100640 	call	10064 <setup>
					setup(0, 0);
   102d0:	0009883a 	mov	r4,zero
   102d4:	000b883a 	mov	r5,zero


	}


}
   102d8:	dfc00117 	ldw	ra,4(sp)
   102dc:	dc000017 	ldw	r16,0(sp)
   102e0:	dec00204 	addi	sp,sp,8
					setup(0, 0);
					break;
				default:
					estado = 0;
					setup(0, 1);
					setup(0, 0);
   102e4:	00100641 	jmpi	10064 <setup>

000102e8 <f_interrupt>:

void f_interrupt (void) {

	static alt_u16 cont_timer0=0, cont_timer1=0, cont_timer2=0;

	cont_timer0++; cont_timer1++; cont_timer2++;
   102e8:	d160030b 	ldhu	r5,-32756(gp)
   102ec:	d0e0028b 	ldhu	r3,-32758(gp)
   102f0:	d0a0020b 	ldhu	r2,-32760(gp)

	if (cont_timer0 < max_timer0)
   102f4:	d1e0050b 	ldhu	r7,-32748(gp)

void f_interrupt (void) {

	static alt_u16 cont_timer0=0, cont_timer1=0, cont_timer2=0;

	cont_timer0++; cont_timer1++; cont_timer2++;
   102f8:	29800044 	addi	r6,r5,1
	//setup();
	while (1) loop();
	return 0;
}

void f_interrupt (void) {
   102fc:	deffff04 	addi	sp,sp,-4

	static alt_u16 cont_timer0=0, cont_timer1=0, cont_timer2=0;

	cont_timer0++; cont_timer1++; cont_timer2++;
   10300:	18c00044 	addi	r3,r3,1
   10304:	10800044 	addi	r2,r2,1

	if (cont_timer0 < max_timer0)
   10308:	313fffcc 	andi	r4,r6,65535
	//setup();
	while (1) loop();
	return 0;
}

void f_interrupt (void) {
   1030c:	dfc00015 	stw	ra,0(sp)
	static alt_u16 cont_timer0=0, cont_timer1=0, cont_timer2=0;

	cont_timer0++; cont_timer1++; cont_timer2++;

	if (cont_timer0 < max_timer0)
		cont_timer0++;
   10310:	29400084 	addi	r5,r5,2

void f_interrupt (void) {

	static alt_u16 cont_timer0=0, cont_timer1=0, cont_timer2=0;

	cont_timer0++; cont_timer1++; cont_timer2++;
   10314:	d0e0028d 	sth	r3,-32758(gp)
   10318:	d0a0020d 	sth	r2,-32760(gp)
   1031c:	d1a0030d 	sth	r6,-32756(gp)

	if (cont_timer0 < max_timer0)
   10320:	21c0022e 	bgeu	r4,r7,1032c <f_interrupt+0x44>
		cont_timer0++;
   10324:	d160030d 	sth	r5,-32756(gp)
   10328:	00000206 	br	10334 <f_interrupt+0x4c>
	else {
		cont_timer0 = 0;
   1032c:	d020030d 	sth	zero,-32756(gp)
		f_timer0();
   10330:	00100a40 	call	100a4 <f_timer0>
	}

	if (cont_timer1 < max_timer1)
   10334:	d0a0028b 	ldhu	r2,-32758(gp)
   10338:	d0e0060b 	ldhu	r3,-32744(gp)
		cont_timer1++;
   1033c:	11000044 	addi	r4,r2,1
	else {
		cont_timer0 = 0;
		f_timer0();
	}

	if (cont_timer1 < max_timer1)
   10340:	10bfffcc 	andi	r2,r2,65535
   10344:	10c0022e 	bgeu	r2,r3,10350 <f_interrupt+0x68>
		cont_timer1++;
   10348:	d120028d 	sth	r4,-32758(gp)
   1034c:	00000106 	br	10354 <f_interrupt+0x6c>
	else {
		cont_timer1 = 0;
   10350:	d020028d 	sth	zero,-32758(gp)
		f_timer1();
	}

	if (cont_timer2 < max_timer2)
   10354:	d0a0020b 	ldhu	r2,-32760(gp)
   10358:	d0e0058b 	ldhu	r3,-32746(gp)
		cont_timer2++;
   1035c:	11000044 	addi	r4,r2,1
	else {
		cont_timer1 = 0;
		f_timer1();
	}

	if (cont_timer2 < max_timer2)
   10360:	10bfffcc 	andi	r2,r2,65535
   10364:	10c0022e 	bgeu	r2,r3,10370 <f_interrupt+0x88>
		cont_timer2++;
   10368:	d120020d 	sth	r4,-32760(gp)
   1036c:	00000106 	br	10374 <f_interrupt+0x8c>
	else {
		cont_timer2 = 0;
   10370:	d020020d 	sth	zero,-32760(gp)
		f_timer2();
	}
}
   10374:	dfc00017 	ldw	ra,0(sp)
   10378:	dec00104 	addi	sp,sp,4
   1037c:	f800283a 	ret

00010380 <loop>:

void f_timer2 (void) {

}

void loop (void) {
   10380:	deffff04 	addi	sp,sp,-4
   10384:	dfc00015 	stw	ra,0(sp)
	f_interrupt();
   10388:	00102e80 	call	102e8 <f_interrupt>
	usleep(1000);
   1038c:	0100fa04 	movi	r4,1000
}
   10390:	dfc00017 	ldw	ra,0(sp)
   10394:	dec00104 	addi	sp,sp,4

}

void loop (void) {
	f_interrupt();
	usleep(1000);
   10398:	00104641 	jmpi	10464 <usleep>

0001039c <main>:
}

int main() {
   1039c:	deffff04 	addi	sp,sp,-4
   103a0:	dfc00015 	stw	ra,0(sp)
	//setup();
	while (1) loop();
   103a4:	00103800 	call	10380 <loop>
   103a8:	003ffe06 	br	103a4 <main+0x8>

000103ac <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   103ac:	2900051e 	bne	r5,r4,103c4 <alt_load_section+0x18>
   103b0:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   103b4:	20800017 	ldw	r2,0(r4)
   103b8:	21000104 	addi	r4,r4,4
   103bc:	28800015 	stw	r2,0(r5)
   103c0:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   103c4:	29bffb1e 	bne	r5,r6,103b4 <alt_load_section+0x8>
   103c8:	f800283a 	ret

000103cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103cc:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   103d0:	01000074 	movhi	r4,1
   103d4:	2101ac04 	addi	r4,r4,1712
   103d8:	01400074 	movhi	r5,1
   103dc:	2941ab04 	addi	r5,r5,1708
   103e0:	01800074 	movhi	r6,1
   103e4:	3181ac04 	addi	r6,r6,1712
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103e8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   103ec:	00103ac0 	call	103ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   103f0:	01000074 	movhi	r4,1
   103f4:	21000804 	addi	r4,r4,32
   103f8:	01400074 	movhi	r5,1
   103fc:	29400804 	addi	r5,r5,32
   10400:	01800074 	movhi	r6,1
   10404:	31800804 	addi	r6,r6,32
   10408:	00103ac0 	call	103ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1040c:	01000074 	movhi	r4,1
   10410:	2101ab04 	addi	r4,r4,1708
   10414:	01400074 	movhi	r5,1
   10418:	2941ab04 	addi	r5,r5,1708
   1041c:	01800074 	movhi	r6,1
   10420:	3181ab04 	addi	r6,r6,1708
   10424:	00103ac0 	call	103ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10428:	00105180 	call	10518 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1042c:	dfc00017 	ldw	ra,0(sp)
   10430:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10434:	001051c1 	jmpi	1051c <alt_icache_flush_all>

00010438 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10438:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1043c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10440:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10444:	001046c0 	call	1046c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10448:	00104680 	call	10468 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1044c:	d1200717 	ldw	r4,-32740(gp)
   10450:	d1600817 	ldw	r5,-32736(gp)
   10454:	d1a00917 	ldw	r6,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10458:	dfc00017 	ldw	ra,0(sp)
   1045c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10460:	001039c1 	jmpi	1039c <main>

00010464 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   10464:	001048c1 	jmpi	1048c <alt_busy_sleep>

00010468 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
   10468:	f800283a 	ret

0001046c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1046c:	deffff04 	addi	sp,sp,-4
   10470:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10474:	00105200 	call	10520 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10478:	00800044 	movi	r2,1
   1047c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10480:	dfc00017 	ldw	ra,0(sp)
   10484:	dec00104 	addi	sp,sp,4
   10488:	f800283a 	ret

0001048c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1048c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10490:	014666b4 	movhi	r5,6554
   10494:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10498:	dc000015 	stw	r16,0(sp)
   1049c:	dfc00115 	stw	ra,4(sp)
   104a0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   104a4:	00106640 	call	10664 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   104a8:	10001126 	beq	r2,zero,104f0 <alt_busy_sleep+0x64>
   104ac:	0007883a 	mov	r3,zero
   104b0:	01200034 	movhi	r4,32768
   104b4:	213fffc4 	addi	r4,r4,-1
   104b8:	017999b4 	movhi	r5,58982
   104bc:	295999c4 	addi	r5,r5,26215
   104c0:	00000406 	br	104d4 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   104c4:	213fffc4 	addi	r4,r4,-1
   104c8:	203ffe1e 	bne	r4,zero,104c4 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   104cc:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   104d0:	18c00044 	addi	r3,r3,1
   104d4:	18bffb16 	blt	r3,r2,104c4 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   104d8:	8009883a 	mov	r4,r16
   104dc:	01400144 	movi	r5,5
   104e0:	00106740 	call	10674 <__mulsi3>
   104e4:	10bfffc4 	addi	r2,r2,-1
   104e8:	103ffe1e 	bne	r2,zero,104e4 <alt_busy_sleep+0x58>
   104ec:	00000506 	br	10504 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   104f0:	8009883a 	mov	r4,r16
   104f4:	01400144 	movi	r5,5
   104f8:	00106740 	call	10674 <__mulsi3>
   104fc:	10bfffc4 	addi	r2,r2,-1
   10500:	00bffe16 	blt	zero,r2,104fc <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10504:	0005883a 	mov	r2,zero
   10508:	dfc00117 	ldw	ra,4(sp)
   1050c:	dc000017 	ldw	r16,0(sp)
   10510:	dec00204 	addi	sp,sp,8
   10514:	f800283a 	ret

00010518 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10518:	f800283a 	ret

0001051c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1051c:	f800283a 	ret

00010520 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10520:	000170fa 	wrctl	ienable,zero
}
   10524:	f800283a 	ret

00010528 <udivmodsi4>:
   10528:	29001b2e 	bgeu	r5,r4,10598 <udivmodsi4+0x70>
   1052c:	28001a16 	blt	r5,zero,10598 <udivmodsi4+0x70>
   10530:	00800044 	movi	r2,1
   10534:	0007883a 	mov	r3,zero
   10538:	01c007c4 	movi	r7,31
   1053c:	00000306 	br	1054c <udivmodsi4+0x24>
   10540:	19c01326 	beq	r3,r7,10590 <udivmodsi4+0x68>
   10544:	18c00044 	addi	r3,r3,1
   10548:	28000416 	blt	r5,zero,1055c <udivmodsi4+0x34>
   1054c:	294b883a 	add	r5,r5,r5
   10550:	1085883a 	add	r2,r2,r2
   10554:	293ffa36 	bltu	r5,r4,10540 <udivmodsi4+0x18>
   10558:	10000d26 	beq	r2,zero,10590 <udivmodsi4+0x68>
   1055c:	0007883a 	mov	r3,zero
   10560:	21400236 	bltu	r4,r5,1056c <udivmodsi4+0x44>
   10564:	2149c83a 	sub	r4,r4,r5
   10568:	1886b03a 	or	r3,r3,r2
   1056c:	1004d07a 	srli	r2,r2,1
   10570:	280ad07a 	srli	r5,r5,1
   10574:	103ffa1e 	bne	r2,zero,10560 <udivmodsi4+0x38>
   10578:	30000226 	beq	r6,zero,10584 <udivmodsi4+0x5c>
   1057c:	2005883a 	mov	r2,r4
   10580:	f800283a 	ret
   10584:	1809883a 	mov	r4,r3
   10588:	2005883a 	mov	r2,r4
   1058c:	f800283a 	ret
   10590:	0007883a 	mov	r3,zero
   10594:	003ff806 	br	10578 <udivmodsi4+0x50>
   10598:	00800044 	movi	r2,1
   1059c:	0007883a 	mov	r3,zero
   105a0:	003fef06 	br	10560 <udivmodsi4+0x38>

000105a4 <__divsi3>:
   105a4:	defffe04 	addi	sp,sp,-8
   105a8:	dc000015 	stw	r16,0(sp)
   105ac:	dfc00115 	stw	ra,4(sp)
   105b0:	0021883a 	mov	r16,zero
   105b4:	20000c16 	blt	r4,zero,105e8 <__divsi3+0x44>
   105b8:	000d883a 	mov	r6,zero
   105bc:	28000e16 	blt	r5,zero,105f8 <__divsi3+0x54>
   105c0:	00105280 	call	10528 <udivmodsi4>
   105c4:	1007883a 	mov	r3,r2
   105c8:	8005003a 	cmpeq	r2,r16,zero
   105cc:	1000011e 	bne	r2,zero,105d4 <__divsi3+0x30>
   105d0:	00c7c83a 	sub	r3,zero,r3
   105d4:	1805883a 	mov	r2,r3
   105d8:	dfc00117 	ldw	ra,4(sp)
   105dc:	dc000017 	ldw	r16,0(sp)
   105e0:	dec00204 	addi	sp,sp,8
   105e4:	f800283a 	ret
   105e8:	0109c83a 	sub	r4,zero,r4
   105ec:	04000044 	movi	r16,1
   105f0:	000d883a 	mov	r6,zero
   105f4:	283ff20e 	bge	r5,zero,105c0 <__divsi3+0x1c>
   105f8:	014bc83a 	sub	r5,zero,r5
   105fc:	8021003a 	cmpeq	r16,r16,zero
   10600:	003fef06 	br	105c0 <__divsi3+0x1c>

00010604 <__modsi3>:
   10604:	deffff04 	addi	sp,sp,-4
   10608:	dfc00015 	stw	ra,0(sp)
   1060c:	01800044 	movi	r6,1
   10610:	2807883a 	mov	r3,r5
   10614:	20000416 	blt	r4,zero,10628 <__modsi3+0x24>
   10618:	28000c16 	blt	r5,zero,1064c <__modsi3+0x48>
   1061c:	dfc00017 	ldw	ra,0(sp)
   10620:	dec00104 	addi	sp,sp,4
   10624:	00105281 	jmpi	10528 <udivmodsi4>
   10628:	0109c83a 	sub	r4,zero,r4
   1062c:	28000b16 	blt	r5,zero,1065c <__modsi3+0x58>
   10630:	180b883a 	mov	r5,r3
   10634:	01800044 	movi	r6,1
   10638:	00105280 	call	10528 <udivmodsi4>
   1063c:	0085c83a 	sub	r2,zero,r2
   10640:	dfc00017 	ldw	ra,0(sp)
   10644:	dec00104 	addi	sp,sp,4
   10648:	f800283a 	ret
   1064c:	014bc83a 	sub	r5,zero,r5
   10650:	dfc00017 	ldw	ra,0(sp)
   10654:	dec00104 	addi	sp,sp,4
   10658:	00105281 	jmpi	10528 <udivmodsi4>
   1065c:	0147c83a 	sub	r3,zero,r5
   10660:	003ff306 	br	10630 <__modsi3+0x2c>

00010664 <__udivsi3>:
   10664:	000d883a 	mov	r6,zero
   10668:	00105281 	jmpi	10528 <udivmodsi4>

0001066c <__umodsi3>:
   1066c:	01800044 	movi	r6,1
   10670:	00105281 	jmpi	10528 <udivmodsi4>

00010674 <__mulsi3>:
   10674:	20000a26 	beq	r4,zero,106a0 <__mulsi3+0x2c>
   10678:	0007883a 	mov	r3,zero
   1067c:	2080004c 	andi	r2,r4,1
   10680:	1005003a 	cmpeq	r2,r2,zero
   10684:	2008d07a 	srli	r4,r4,1
   10688:	1000011e 	bne	r2,zero,10690 <__mulsi3+0x1c>
   1068c:	1947883a 	add	r3,r3,r5
   10690:	294b883a 	add	r5,r5,r5
   10694:	203ff91e 	bne	r4,zero,1067c <__mulsi3+0x8>
   10698:	1805883a 	mov	r2,r3
   1069c:	f800283a 	ret
   106a0:	0007883a 	mov	r3,zero
   106a4:	1805883a 	mov	r2,r3
   106a8:	f800283a 	ret
